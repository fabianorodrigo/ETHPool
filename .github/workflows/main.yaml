name: ETHPool CI/CD

on:
  [push]
env:
  RINKEBY_ALCHEMY_API_KEY_URL: https://eth-rinkeby.alchemyapi.io/v2/<KEY>
  ADMIN_PRIVATE_KEY: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
  MANAGER_PRIVATE_KEY: "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d"
  TEAMMEMBER_PRIVATE_KEY: "0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a"
  ETHERSCAN_API_KEY: "CI/CD Environment"
  ROPSTEN_URL: $ROPSTEN_URL
jobs:
  build_test:
    name: Integration Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit == false }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm install
        working-directory: ./
      - name: Build
        run: npm run build
        working-directory: ./
      - name: Run tests
        run: npm run test
        working-directory: ./
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          working-directory: ./
          name: Hardhat Tests Results    # Name of the check run which will be created
          path: reports/test-contract-results.xml    # Path to test results
          reporter: java-junit           # Format of test results        
  slither:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Run Slither
        uses: crytic/slither-action@v0.1.1
        id: slither
      #   continue-on-error: true
      #   with:
      #     sarif: results.sarif
      #     # slither-config: .//slither.config.json
      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: ${{ steps.slither.outputs.sarif }}
